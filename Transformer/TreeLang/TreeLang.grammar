using System.Collections.Generic;
using Microsoft.ProgramSynthesis.Utils;

using Prem.Util;
using Prem.Transformer.TreeLang;

using semantics Prem.Transformer.TreeLang.Semantics;
using learners Prem.Transformer.TreeLang.WitnessFunctions;

language TreeLang;

@complete feature double Score = Prem.Transformer.TreeLang.RankingScore;

@input TInput source;

@start SyntaxNode program := Ins(target, k, newTree) | Del(target) | Upd(target, newTree);

SyntaxNode newTree := New(tree);

PartialNode tree := Copy(ref) | Leaf(label, token) | Tree(label, children);

IEnumerable<PartialNode> children := Child(tree) | Children(tree, children);

SyntaxNode target := Just(source)
                   | ref;

SyntaxNode ref := ancestor
                | Find(ancestor, label, k)
                | FindRel(ancestor, label, cursor, child, siblingFeature);

SyntaxNode ancestor := Move(source, cursor);

Record<Label, string>? siblingFeature := Feature(label, token) = Pair(label, token);

string token := Const(s) | Var(source, k) | FindToken(source, cursor, child, label, k);

int child;
int k;
string s;

Label label;
Cursor cursor;