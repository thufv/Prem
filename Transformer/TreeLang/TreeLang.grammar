using System.Collections.Generic;
using Microsoft.ProgramSynthesis.Utils;

using Prem.Util;
using Prem.Transformer.TreeLang;

using semantics Prem.Transformer.TreeLang.Semantics;
using learners Prem.Transformer.TreeLang.PremStrategy;

language TreeLang;

@complete feature double Score = Prem.Transformer.TreeLang.RankingScore;

@input TInput old;

@start SyntaxNode program := Transform(target, newTree);

SyntaxNode target := source | ref;

SyntaxNode source := Err(old) | Var(old, key);

SyntaxNode ref := scope | Select(scope, label, disjunction);

SyntaxNode scope := node | Sub(node, index);

Node node := Lift(source, label, k);

Func<SyntaxNode, bool> disjunction := True() | conjunction | Or(disjunction, conjunction);

Func<SyntaxNode, bool> conjunction := featurePredicate | And(conjunction, featurePredicate);

Func<SyntaxNode, bool> featurePredicate := HasFeature(f);

string token := ConstToken(s) | VarToken(old, key) | ErrToken(old);

SyntaxNode newTree := New(tree);

PartialNode tree := Copy(ref) | Leaf(label, token) | Node(label, children);

IEnumerable<PartialNode> children := Child(tree) | Children(tree, children) | Append(ref, children);

Optional<int> index;
Label label;
Feature f;
int k;
string s;
EnvKey key;