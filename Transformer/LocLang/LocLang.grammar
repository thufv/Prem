using System.Collections.Generic;
using Prem.Util;
using Prem.Transformer.LocLang;
using Microsoft.ProgramSynthesis.Utils;

using semantics Prem.Transformer.LocLang.Semantics;
using learners Prem.Transformer.LocLang.WitnessFunctions;

language LocLang;

@complete feature double Score = Prem.Transformer.LocLang.RankingScore;

@input SyntaxNode source;

@start SyntaxNode program := Ins(target, k, newTree) | Del(target) | Upd(target, newTree);

SyntaxNode newTree := New(tree);

PartialNode tree := Copy(target) | ConstToken(label, code) | Tree(label, children);

IEnumerable<PartialNode> children := Child(tree) | Children(tree, children);

SyntaxNode target := Target(candidates, k) = Kth(candidates, k);

IEnumerable<SyntaxNode> candidates := Find(constraint, subtrees)
                                    = Filter(\x: SyntaxNode => constraint, subtrees);

IEnumerable<SyntaxNode> subtrees := Sub(ancestor);

SyntaxNode ancestor := Just(source) | AbsAncestor(source, k) | RelAncestor(source, labelK);

Record<Label, int>? labelK := LabelK(label, k) = Pair(label, k);

bool constraint := Any(x)
                 | AnyError(x)
                 | AnyToken(x) | TokenMatch(x, label)
                 | AnyNode(x) | NodeMatch(x, label);

int k;
Label label;
string code;