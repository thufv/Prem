using System.Collections.Generic;
using Prem.Util;
using Prem.Transformer.LocLang;
using Microsoft.ProgramSynthesis.Utils;

using semantics Prem.Transformer.LocLang.Semantics;
using learners Prem.Transformer.LocLang.WitnessFunctions;

language LocLang;

@complete feature double Score = Prem.Transformer.LocLang.RankingScore;

@input CST.Tree source;

@start CST.Tree target := Target(candidates, k) = Kth(candidates, k);

IEnumerable<CST.Tree> candidates := Find(constraint, subtrees)
                                  = Filter(\x: CST.Tree => constraint, subtrees);

IEnumerable<CST.Tree> subtrees := Sub(source, ancestor);

CST.Node ancestor := AbsAncestor(source, k)
                   | RelAncestor(source, labelK);

Record<string, int>? labelK := LabelK(label, k) = Pair(label, k);

bool constraint := Any(x)
                 | AnyError(x)
                 | AnyToken(x) | TokenMatch(x, type)
                 | AnyNode(x) | NodeMatch(x, label);

int k;
string label;
int type;